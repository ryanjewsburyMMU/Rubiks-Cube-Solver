Notes:

Not detecting yellow / white on startup...

Implementaion of openccv works

HOWEVER

We need to adjust the order so that it falls in coreect format...
cube seems to be creating string wrong....


It currently does not.

TODO:
- Comment All Code
- Do ALOT of testing
- Try and give incorrect cubes  - test stability of error detection
- Possibly Add simple timer - if time superpasses 15 seconds, alert user and error has occured.
- Make becca able to understand messagebox, then anyone will
- Remove X Y and M from scrambles
- Implement x2 values ("R2, L2")

-- Scramble Optimiser?



R Ui F L B D

SOMETHING HAPPENED WRONG

double look over white cross
algorithm not working as expected...


# Notes
----------------------------------
OpenCV window did not close
with the addition of
--
cv2.destroyAllWindows()
for i in range(1, 5):
    cv2.waitKey(1)
--
It closes fine.

# After Yellow Cross (GUI)
    BRB
    OOO
    OOO
OGG WWW BBR YYY
OGG WWW BBB YYY
GGG WWW BBG YYY
    RRR
    RRR
    RGO



  WHITE / BLUE
  WHITE / GREEN
  WHITE / ORANGE
  WHITE / RED


  # Order:
   move_title
   edit_cube_title
   resetButton


   randomScrambleButton





    # Search current_cube for a particular index
    current_cube.get_piece(-1,1,-1).colors[0]

    Returns:
    'G'

    colourFromLetter( current_cube.get_piece(-1,1,-1).colors[0]  )

    Returns:
    Green

    # We can then set the colour of green_00 to Green using the tag green_00 and itemconfigure

    cubeCanvas.itemconfigure(green_00, fill=colourFromLetter(current_cube.get_piece(-1, 1, -1).colors[0]))



    This is how the layout of the cube is expected to be to be:
                   ----------------
                   | 0  | 1  | 2  |
                   ----------------
                   | 3  | 4  | 5  |
                   ----------------
                   | 6  | 7  | 8  |
                   ----------------
    -------------------------------------------------------------
    | 9  | 10 | 11 | 18 | 19 | 20 | 27 | 28 | 29 | 36 | 37 | 38 |
    -------------------------------------------------------------
    | 12 | 13 | 14 | 21 | 22 | 23 | 30 | 31 | 32 | 39 | 40 | 41 |
    -------------------------------------------------------------
    | 15 | 16 | 17 | 24 | 25 | 26 | 33 | 34 | 35 | 42 | 43 | 44 |
    -------------------------------------------------------------
                   ----------------
                   | 45 | 46 | 47 |
                   ----------------
                   | 48 | 49 | 50 |
                   ----------------
                   | 51 | 52 | 53 |
                   ----------------
    So the final cube should be in the same format:
    "012345678910111213141516171819202122232425262728293031323435363738394041424344454647484950515253"



How it works (In More Detail):

User will select a rectangle from the bottom right.

If this rectangle is in the options dictionary, then it means you have selected a colour from the bottom right.

This will set current_color to a value stored in the dictionary - so if you select rectangle 55 for example, this
rectangle corresponds to the colour white, and therefore current_color will be set to "White".

With current_color now being "White", if you select a rectangle not in options, which means any of the rectangles
that build up the cube, the colour value of this rectangle will be changed to the current_colour variable.

This is all only available whilst edit mode is active, if edit mode is not active, clicking on any rectangle will
not do anything.




How the full solve works...

This method starts by checking if the user is still in edit mode, if they are and they press solve cube, their changes
will not be made, and therefore they will be given an incorrect solving method.

Then we check if the cube is already solved, and if so we return a messagebox to inform the user that the cube is
already solved.

Then we take the current cube, and check it has 9 of each colour using the checkSolvable method. If it is, we move on
to solving the cube - if it does the number of colours is not equal to 9 of each, we inform the user this.

The finally, we clear the solving list box, and use performAlgorithm() to make those changes on the cube.
The cube will eventually be solved.

We also add each move to the solve list box, so that the user can see the full solve.




















